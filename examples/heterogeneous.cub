module heterogeneous where

import primitives
import prelude
import gradLemma

eqFst : (A : U) (B : A -> U) (u v : Sigma A B) ->
        Id (Sigma A B) u v -> Id A u.1 v.1
eqFst A B = mapOnPath (Sigma A B) A (\x -> x.1)

eqSnd : (A : U) (B : A -> U) (u v : Sigma A B) (p : Id (Sigma A B) u v) ->
        IdS A B u.1 v.1 (eqFst A B u v p) u.2 v.2
eqSnd A B = mapOnPathD (Sigma A B) (\x -> B x.1) (\x -> x.2)

eqPair1 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
        Id (Sigma A B) (a0,b0) (a1,b1) -> Id A a0 a1
eqPair1 A B a0 a1 b0 b1 = eqFst A B (a0,b0) (a1,b1)

-- eqPair2 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1)
--        (p : Id (Sigma A B) (pair a0 b0) (pair a1 b1)) ->
--        IdS A B a0 a1 (eqPair1 A B a0 a1 b0 b1 p) b0 b1
-- eqPair2 A B a0 a1 b0 b1 = eqSnd A B (pair a0 b0) (pair a1 b1)

-- conversion test:
reflIdIdP : (A:U) (a b : A) -> Id U (Id A a b) (IdP A A (refl U A) a b)
reflIdIdP A a b = refl U (Id A a b)

-- conversion test:
reflS : (A:U) (F:A -> U) (a:A) (b : F a) -> IdS A F a a (refl A a) b b
reflS A F a b = refl (F a) b

-- conversion test:
composeMapOnPath : (A : U) (B : A -> U) (u v : Sigma A B) ->
                   (p : Id (Sigma A B) u v) ->
  Id (Id U (B u.1) (B v.1))
    (mapOnPath (Sigma A B) U (\x -> B x.1) u v p)
    (mapOnPath A U B u.1 v.1 (mapOnPath (Sigma A B) A (\x -> x.1) u v p))
composeMapOnPath A B u v p = refl (Id U (B u.1) (B v.1))
          (mapOnPath (Sigma A B) U (\x -> B x.1) u v p)

pairPath : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
           (Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1)) ->
           (Id (Sigma A B) (a0, b0) (a1, b1))
pairPath A B a0 a1 b0 b1 z =
  mapOnPathS A B (Sigma A B) (\a b -> (a, b)) a0 a1 z.1 b0 b1 z.2

eqFstSnd : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
           Id U
             (Id (Sigma A B) (a0, b0) (a1, b1))
	     (Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1))
eqFstSnd A B a0 a1 b0 b1 = isEquivEq IdSig SigId f
                           (gradLemma IdSig SigId f g (refl SigId) (refl IdSig))
  where IdSig : U
        IdSig = Id (Sigma A B) (a0, b0) (a1, b1)

        SigId : U
        SigId = Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1)

        f : IdSig -> SigId
        f p = (eqFst A B (a0,b0) (a1,b1) p, eqSnd  A B (a0,b0) (a1,b1) p)


        g : SigId -> IdSig
        g z =  mapOnPathS A B (Sigma A B) (\a b -> (a, b)) a0 a1 z.1 b0 b1 z.2

eqSubstSig : (A : U) (F : A -> U) (x y : A) (p : Id A x y) (u : F x) (v : F y) ->
             Id U (IdS A F x y p u v) (Id (F y) (subst A F x y p u) v)
eqSubstSig A F x =
 J A x (\ y p -> (u : F x) (v : F y) ->
        Id U (IdS A F x y p u v) (Id (F y) (subst A F x y p u) v))
   (\u v -> refl U (Id (F x) u v))

idSIntro : (A : U) (F : A -> U) (x y : A) (p : Id A x y) (u : F x) (v : F y) ->
           Id (F y) (subst A F x y p u) v -> IdS A F x y p u v
idSIntro A F x y p u v =
  transpInv (IdS A F x y p u v) (Id (F y) (subst A F x y p u) v)
    (eqSubstSig A F x y p u v)

-- idSElim : (A : U) (F : A -> U) (x y : A) (p : Id A x y) (u : F x) (v : F y) ->
--           IdS A F x y p u v -> Id (F y) (subst A F x y p u) v
-- idSElim A F x y p u v =
--   transport (IdS A F x y p u v) (Id (F y) (subst A F x y p u) v)
--     (eqSubstSig A F x y p u v)

idSElim : (A : U) (F : A -> U) (x y : A) (p : Id A x y) (u : F x) (v : F y) ->
            IdS A F x y p u v -> Id (F y) (subst A F x y p u) v
idSElim A F x = J A x
  (\ y p ->  (u : F x) (v : F y) -> IdS A F x y p u v -> Id (F y) (subst A F x y p u) v)
  (\ u v h -> h)


substPathPi : (A B : U) (f g : A -> B) (a a' : A) (p : Id A a a')
  (qa : Id B (f a) (g a)) (qa' : Id B (f a') (g a')) ->
  Id (Id B (f a) (g a'))
     (comp B (f a) (g a) (g a') qa (mapOnPath A B g a a' p))
     (comp B (f a) (f a') (g a') (mapOnPath A B f a a' p) qa') ->
  IdS A (\x -> Id B (f x) (g x)) a a' p qa qa'
substPathPi A B f g a = J A a
  (\a' p ->  (qa : Id B (f a) (g a)) (qa' : Id B (f a') (g a')) ->
  Id (Id B (f a) (g a'))
     (comp B (f a) (g a) (g a') qa (mapOnPath A B g a a' p))
     (comp B (f a) (f a') (g a') (mapOnPath A B f a a' p) qa') ->
  IdS A (\x -> Id B (f x) (g x)) a a' p qa qa')
  rem
  where rem : (qa : Id B (f a) (g a)) (qa' : Id B (f a) (g a)) ->
              Id (Id B (f a) (g a))
                qa (comp B (f a) (f a) (g a) (refl B (f a)) qa') ->
              Id (Id B (f a) (g a)) qa qa'
        rem qa qa' = subst (Id B (f a) (g a)) (Id (Id B (f a) (g a)) qa)
                       (comp B (f a) (f a) (g a) (refl B (f a)) qa') qa'
                       (compIdl B (f a) (g a) qa')

substPathPiInv : (A B : U) (f g : A -> B) (a a' : A) (p : Id A a a')
  (qa : Id B (f a) (g a)) (qa' : Id B (f a') (g a')) ->
  IdS A (\x -> Id B (f x) (g x)) a a' p qa qa' ->
  Id (Id B (f a) (g a'))
     (comp B (f a) (g a) (g a') qa (mapOnPath A B g a a' p))
     (comp B (f a) (f a') (g a') (mapOnPath A B f a a' p) qa')
substPathPiInv A B f g a = J A a (\a' p ->
  (qa : Id B (f a) (g a)) (qa' : Id B (f a') (g a')) ->
  IdS A (\x -> Id B (f x) (g x)) a a' p qa qa' ->
  Id (Id B (f a) (g a'))
     (comp B (f a) (g a) (g a') qa (mapOnPath A B g a a' p))
     (comp B (f a) (f a') (g a') (mapOnPath A B f a a' p) qa'))
     (\qa qa' -> rem B (f a) (g a) qa qa')
   where rem : (A : U) (a b : A) (p q : Id A a b) ->
               Id (Id A a b) p q ->
                Id (Id A a b) p (comp A a a b (refl A a) q)
         rem A a b p = J (Id A a b) p
           (\q al -> Id (Id A a b) p (comp A a a b (refl A a) q))
           (compInvIdl A a b p)

funExtDep : (A B : U) (C : A -> B -> U) (a0 a1:A) (p : Id A a0 a1) 
           (f0 : (y:B) -> C a0 y) (f1 : (y:B) -> C a1 y) -> 
           ((y:B) -> IdS A (\ x -> C x y) a0 a1 p (f0 y) (f1 y)) -> 
           IdS A (\ x -> (y:B) -> C x y) a0 a1 p f0 f1
funExtDep A B C a0 = 
  J A a0 (\ a1 p -> (f0 : (y:B) -> C a0 y) (f1 : (y:B) -> C a1 y) -> 
                  ((y:B) -> IdS A (\ x -> C x y) a0 a1 p (f0 y) (f1 y)) -> 
                  IdS A (\ x -> (y:B) -> C x y) a0 a1 p f0 f1)
    rem
 where
   rem : (f0 f1 : (y:B) -> C a0 y) -> 
         ((y:B) -> Id (C a0 y) (f0 y) (f1 y)) -> Id ((y:B) -> C a0 y) f0 f1
   rem = funExt B (C a0)


funExt3 : (C B : U) (F : C -> U) (a b : C) (p : Id C a b)
          (f : F a -> B) (g : F b -> B)
          (h : (x : F a) (y : F b) (z : IdS C F a b p x y) -> Id B (f x) (g y))
          -> IdS C (\z -> F z -> B) a b p f g
funExt3 C B F a =
  J C a (\b p -> (f : F a -> B) (g : F b -> B)
          (h : (x : F a) (y : F b) (z : IdS C F a b p x y) -> Id B (f x) (g y))
          -> IdS C (\z -> F z -> B) a b p f g)
    (\f g h -> funExt (F a) (\_ -> B) f g (\x -> h x x (refl (F a) x)))


mapOnPathComp : (A B : U) (f : A -> B) (a b c : A) (p : Id A a b) (q : Id A b c) ->
 Id (Id B (f a) (f c))
    (mapOnPath A B f a c (comp A a b c p q))
    (comp B (f a) (f b) (f c) (mapOnPath A B f a b p) (mapOnPath A B f b c q))
mapOnPathComp A B f a b c p = J A b
 (\c q -> Id (Id B (f a) (f c))
    (mapOnPath A B f a c (comp A a b c p q))
    (comp B (f a) (f b) (f c) (mapOnPath A B f a b p) (mapOnPath A B f b c q)))
 (refl (Id B (f a) (f b)) (mapOnPath A B f a b p)) c


pairEq : (A B:U) (a0 a1:A) (b0 b1:B) -> Id A a0 a1 -> Id B b0 b1 ->
         Id (and A B) (a0, b0) (a1, b1)
pairEq A B a0 a1 b0 b1 p q =
 appOnPath B (and A B) f0 f1 b0 b1 rem q
  where f0 : B -> and A B
        f0 y = (a0, y)
        f1 : B -> and A B
        f1 y = (a1, y)
        rem : Id (B -> and A B) f0 f1
        rem = mapOnPath A (B -> and A B) (\ x y -> (x, y)) a0 a1 p

test : (A B:U) (a0 a1:A) (b0 b1:B) (p:Id A a0 a1) (q:Id B b0 b1) ->
         Id (Id A a0 a1)
            p
            (mapOnPath (and A B) A (\x -> x.1) (a0, b0) (a1, b1)
                       (pairEq A B a0 a1 b0 b1 p q))
test A B a0 a1 b0 b1 p q = refl (Id A a0 a1) p
