module pointed where

import lemId

ptType : U
ptType = (X : U) * X

pt : (Z : ptType) -> Z.1
pt Z = Z.2

Omega : ptType -> ptType
Omega Z = (Id Z.1 (pt Z) (pt Z),refl Z.1 (pt Z))

ptMap : ptType -> ptType -> U
ptMap A B = (f : A.1 -> B.1) * Id B.1 (f (pt A)) (pt B)

mapOmega : (A B : ptType) (h : ptMap A B) -> ptMap (Omega A) (Omega B)
mapOmega A B h = (omf,omf0)
  where a : A.1
        a = pt A
        b : B.1
        b = pt B
        
        f : A.1 -> B.1
        f = h.1
        f0 : Id B.1 (f a) b
        f0 = h.2

        omf : (Omega A).1 -> (Omega B).1
        omf p = comp (B.1) b (f a) b
                  (comp (B.1) b (f a) (f a)
                    (inv (B.1) (f a) b f0)
                    (mapOnPath (A.1) (B.1) f (pt A) (pt A) p))
                  f0

        omf0 : Id (Omega B).1 (omf (refl A.1 a)) (refl B.1 b)
        omf0 = compInvLeft' B.1 (f a) b f0

