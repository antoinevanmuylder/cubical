module Rel where

import Eq

U1 : U
U1 = forall i. U

U2 : U
U2 = forall i j. U

FL : U2 -> U2
FL A = <j><i> A@i@j

F0 : U2 -> U1
F0 A = <i>A@0@i

F1 : U2 -> U1
F1 A = <i>A@i@0

R : (A : U2) -> (x : A@0@0) -> (y : (F0 A) ? x) -> (z : (F1 A) ? x) -> U
R A x y z = (<i> (A@i ? [x , z]@i)) ? y

sym : (A : U2) -> (x : A@0@0) -> (y : (F0 A) ? x) -> (z : (F1 A) ? x) -> R A x y z -> R (FL A) x z y
sym A x y z w = ti!
  where t : forall i j. A@i@j
        t = <i><j> [[x,z]@i,[y,w]@i]@j
        ti : forall j. ((<i> A@i@j) ? [x,y]@j)
        ti = <j> (<i>t@i@j)!

comp : (A : U2) -> (x : A@0@0) -> (y : (F0 A) ? x) -> (z : (F1 A) ? x) -> (w : R A x y z) ->
       Eq (R A x y z) w (sym (FL A) x z y (sym A x y z w))
comp A x y z w Pred proof = proof

