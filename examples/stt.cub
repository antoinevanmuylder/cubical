module stt where


Eq : (A : U) -> (x y : A) -> U
Eq A x y = forall i j. ID (A) [i/x,j/y]

fc0 : (A : U) -> (forall i j. A) -> A
fc0 A x = x@0@+

fc1 : (A : U) -> (forall i j. A) -> A
fc1 A x = x@+@0

extensionality : (A B : U) -> (f g : A -> B) -> ((x y : A) -> Eq A x y -> Eq B (f x) (g y)) -> Eq (A -> B) f g
extensionality A B f g p = <i j> \z -> (p (fc0 A z) (fc1 A z) z)@i@j


-- -------------------------------------------------------------------------------
-- z:forall i j. A |- p z@0@j z@i@0 z : Id (B) [i/f z@0@j,j/g z@i@0]
-- -------------------------------------------------------------------------------
-- z:forall i j. A |- (p (fc0 A z) (fc1 A z) z) : Id (B) [i/f z@0@j,j/g z@i@0]
-- -------------------------------------------------------------------------------
-- i j, z:A |- (p (fc0 A z) (fc1 A z) z)@i@j : Id (B) [i/f z,j/g z]
-- -------------------------------------------------------------------------------
-- i j |- \z -> (p (fc0 A z) (fc1 A z) z)@i@j : Id (A -> B) [i/f,j/g]
-- -------------------------------------------------------------------------------
-- <i j> \z -> (p (fc0 A z) (fc1 A z) z)@i@j : forall i j. Id (A -> B) [i/f,j/g]


coe : (A B : U) -> (t : A) -> Eq U A B -> B
coe A B t X = (t ^j (X@i@j))[0/i][+/j]

