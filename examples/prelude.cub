-- some basic data types and functions
module prelude where

import primitives

Sigma : (A : U) (B : A -> U) -> U
Sigma A B = (x : A) * B x

fiber : (A B : U) (f : A -> B) (y : B) -> U
fiber A B f y = Sigma A (\x -> Id B (f x) y)

prop : U -> U
prop A = (a b : A) -> Id A a b

id : (A : U) -> A -> A
id A a = a

pathTo : (A:U) -> A -> U
pathTo A = fiber A A (id A)

sId : (A : U) (a : A) -> pathTo A a
sId A a = (a, refl A a)

transportRef : (A : U) (a : A) -> Id A a (transport A A (refl U A) a)
transportRef A a = refl A a

transpIsoId : (A B : U) (f : A -> B) (g : B -> A)
	           (s : (y:B) -> Id B (f (g y)) y)
                   (t : (x:A) -> Id A (g (f x)) x) ->
                   (a : A) -> Id B (transport A B (isoId A B f g s t) a) (f a)
transpIsoId A B f g s t a = refl B (f a)


propId : (A B : U) -> prop A -> prop B ->
         (f : A -> B) (g : B -> A) -> Id U A B
propId A B pA pB f g = isoId A B f g sfg rfg
 where
  sfg : (b:B) -> Id B (f (g b)) b
  sfg b = pB (f (g b)) b

  rfg : (a:A) -> Id A (g (f a)) a
  rfg a = pA (g (f a)) a


rel : U -> U
rel A = A -> A -> U

euclidean : (A : U) -> rel A -> U
euclidean A R = (a b c : A) -> R a c -> R b c -> R a b

and : (A B : U) -> U
and A B = Sigma A (\_ -> B)

Pi : (A:U) -> (A -> U) -> U
Pi A B = (x:A) -> B x

-- subst : (A : U) (P : A -> U) (a x : A) (p : Id A a x) -> P a -> P x
-- subst A P a x p d = J A a (\ x q -> P x) d x p

subst : (A : U) (P : A -> U) (a x : A) (p : Id A a x) -> P a -> P x
subst A P a x p = transport (P a) (P x) (mapOnPath A U P a x p)

substInv : (A : U) (P : A -> U) (a x : A) (p : Id A a x) -> P x -> P a
substInv A P a x p = subst A (\ y -> P y -> P a) a x p (\ h -> h)


-- Monoids
Monoid : U -> U
data Monoid A =
  monoid (z : A)
         (op : A -> A -> A)
         (_ : (a b c : A) -> Id A (op a (op b c)) (op (op a b) c))
         (_ : (a : A) -> Id A (op a z) a)
         (_ : (a : A) -> Id A (op z a) a)

zm : (A : U) (m : Monoid A) -> A
zm A = split monoid a _ _ _ _ -> a

opm : (A : U) (m : Monoid A) -> (A -> A -> A)
opm A = split monoid _ op _ _ _ -> op

opmA : (A : U) (m : Monoid A) ->
       ((a b c : A) -> Id A (opm A m a (opm A m b c)) (opm A m (opm A m a b) c))
opmA A = split monoid _ _ assoc _ _ -> assoc

opm0 : (A : U) (m : Monoid A) -> ((a : A) -> Id A (opm A m a (zm A m)) a)
opm0 A = split monoid _ _ _ p _ -> p

op0m : (A : U) (m : Monoid A) -> ((a : A) -> Id A (opm A m (zm A m) a) a)
op0m A = split monoid _ _ _ _ p -> p

transMonoid : (A B : U) -> Id U A B -> Monoid A -> Monoid B
transMonoid = subst U Monoid

transMonoidInv : (A B : U) -> Id U A B -> Monoid B -> Monoid A
transMonoidInv = substInv U Monoid

-- some data types

Unit : U
data Unit = tt

N0 : U
data N0 =

efq : (A : U) -> N0 -> A
efq A = split {}

neg : U -> U
neg A = A -> N0

or : U -> U -> U
data or A B = inl (a : A) | inr (b : B)

orElim : (A B C : U) -> (A -> C) -> (B -> C) -> or A B -> C
orElim A B C f g = split
  inl a -> f a
  inr b -> g b

dec : U -> U
dec A = or A (neg A)

discrete : U -> U
discrete A = (a b : A) -> dec (Id A a b)

N0Dec : discrete N0
N0Dec x y = inl rem
 where rem : Id N0 x y
       rem = efq (Id N0 x y) x

decEqCong : (A B : U) (f : A -> B) (g : B -> A) -> dec A -> dec B
decEqCong A B f g = split
  inl a -> inl (f a)
  inr h -> inr (\b -> h (g b))

-- Nat
N : U
data N = zero | suc (n : N)

pred : N -> N
pred = split
  zero  -> zero
  suc n -> n

sucInj : (n m : N) -> Id N (suc n) (suc m) -> Id N n m
sucInj n m h = mapOnPath N N pred (suc n) (suc m) h

addN : N -> N -> N
addN = split
  zero  -> \n -> n
  suc m -> \n -> suc (addN m n)

add0N : (m : N) -> Id N (addN zero m) m
add0N = refl N

addN0 : (m : N) -> Id N (addN m zero) m
addN0 = split
  zero  -> refl N zero
  suc n -> mapOnPath N N (\x -> suc x) (addN n zero) n (addN0 n)

addNA : (m n p : N) -> Id N (addN m (addN n p)) (addN (addN m n) p)
addNA = split
  zero   -> \n p -> refl N (addN n p)
  suc m' -> \n p -> mapOnPath N N (\x -> suc x) (addN m' (addN n p))
                                  (addN (addN m' n) p) (addNA m' n p)

-- Subtract m from n
subN : N -> N -> N
subN = split
  zero -> \n -> n
  suc m -> split
    zero -> zero
    suc n -> subN m n

-- This cannot be defined here because it relies on function...
-- subNK : (m : N) -> retract N N (addN m) (subN m)
-- subNK = split
--   zero  -> \a -> refl N a
--   suc m' -> \a -> subNK m' a

-- addNinj : (m : N) -> injective N N (addN m)
-- addNinj m = retractInj N N (addN m) (subN m) (subNK m)

-- Additive monoid on N
monoidAddN : Monoid N
monoidAddN = monoid zero addN addNA addN0 add0N

znots : (n : N) -> neg (Id N zero (suc n))
znots n h = subst N T zero (suc n) h zero
  where
    T : N -> U
    T = split
          zero -> N
          suc n -> N0

snotz : (n : N) -> neg (Id N (suc n) zero)
snotz n h = substInv N T (suc n) zero h zero
  where
    T : N -> U
    T = split
      zero -> N
      suc n -> N0

natDec : discrete N
natDec = split
  zero  -> split
    zero -> inl (refl N zero)
    suc m -> inr (znots m)
  suc n -> split
    zero -> inr (snotz n)
    suc m -> decEqCong (Id N n m) (Id N (suc n) (suc m))
                       (mapOnPath N N (\x -> suc x) n m) (sucInj n m) (natDec n m)

-- Bool
Bool : U
data Bool = true | false

andBool : Bool -> Bool -> Bool
andBool = split
  true -> \x -> x
  false -> \x -> false

orBool : Bool -> Bool -> Bool
orBool = split
  true  -> \_ -> true
  false -> \x -> x

not : Bool -> Bool
not = split
  true -> false
  false -> true

notK : (x : Bool) -> Id Bool (not (not x)) x
notK = split
  true  -> refl Bool true
  false -> refl Bool false

isEven : N -> Bool
isEven = split
  zero -> true
  suc n -> not (isEven n)

andBoolTrue : (a : Bool) -> Id Bool (andBool a true) a
andBoolTrue = split
  true -> refl Bool true
  false -> refl Bool false

andTrueBool : (a : Bool) -> Id Bool (andBool true a) a
andTrueBool a = refl Bool a

andBoolA : (a b c : Bool) ->
           Id Bool (andBool a (andBool b c)) (andBool (andBool a b) c)
andBoolA = split
  true -> \b c -> refl Bool (andBool b c)
  false -> \_ _ -> refl Bool false

tnotf : neg (Id Bool true false)
tnotf h =
  let T : Bool -> U
      T = split
        true  -> N
        false -> N0
  in subst Bool T true false h zero

fnott : neg (Id Bool false true)
fnott h = substInv Bool T false true h zero
  where
    T : Bool -> U
    T = split
          true  -> N
          false -> N0

boolDec : discrete Bool
boolDec = split
  true -> split
    true -> inl (refl Bool (true))
    false -> inr tnotf
  false -> split
    true -> inr fnott
    false -> inl (refl Bool (false))

unitDec : discrete Unit
unitDec = split tt -> split tt -> inl (refl Unit tt)

appId : (A B : U) (a : A) (f0 f1 : A -> B) ->
        Id (A -> B) f0 f1 -> Id B (f0 a) (f1 a)
appId A B a = mapOnPath (A -> B) B (\f -> f a)

appEq : (A : U) (B : A -> U) (a : A) (f0 f1 : Pi A B) ->
        Id (Pi A B) f0 f1 -> Id (B a) (f0 a) (f1 a)
appEq A B a = mapOnPath (Pi A B) (B a) (\ f -> f a)

J : (A : U) (a : A) (C : (x : A) -> Id A a x -> U)
    (d : C a (refl A a)) (x : A) (p : Id A a x) -> C x p
J A a C d x p = subst (singl A a) T (a, refl A a) (x, p) (contrSingl A a x p) d
 where T : singl A a -> U
       T z = C (z.1) (z.2)

defEqJ : (A : U) (a : A) (C : (x : A) -> Id A a x -> U) (d : C a (refl A a)) ->
         Id (C a (refl A a)) (J A a C d a (refl A a)) d
defEqJ A a C d = refl (C a (refl A a)) d

sId : (A : U) (a : A) -> pathTo A a
sId A a = (a, refl A a)

tId : (A : U) (a : A) (v : pathTo A a) -> Id (pathTo A a) (sId A a) v
tId A a z = rem (z.1) a (z.2)
   where
    rem : (x y : A) (p : Id A x y) -> Id (pathTo A y) (sId A y) (x, p)
    rem x = J A x (\y p -> Id (pathTo A y) (sId A y) (x, p))
                  (refl (pathTo A x) (sId A x))

-- typEquivS : (A B : U) -> (f : A -> B) -> U
-- typEquivS A B f = (y : B) -> fiber A B f y

-- typEquivT : (A B : U) -> (f : A -> B) -> typEquivS A B f -> U
-- typEquivT A B f s = (y : B) -> (v : fiber A B f y) -> Id (fiber A B f y) (s y) v

-- isEquiv : (A B : U) (f : A -> B) -> U
-- isEquiv A B f = Sigma (typEquivS A B f) (typEquivT A B f)

-- isEquivEq : (A B : U) (f : A -> B) -> isEquiv A B f -> Id U A B
-- isEquivEq A B f z = equivEq A B f z.1 z.2

-- -- not needed if we have eta

-- etaId : (A : U) (B : A -> U) -> (f : Pi A B) -> Id (Pi A B) (\x -> f x) f
-- etaId A B f = funExt A B (\x -> f x) f (\x -> refl (B x) (f x))

-- funSplit : (A : U) (B : A -> U) (C : Pi A B -> U) ->
--            ((f : Pi A B) -> C (\x -> f x)) -> Pi (Pi A B) C
-- funSplit A B C eC f = subst (Pi A B) C (\x -> f x) f (etaId A B f) (eC f)

lemProp1 : (A : U) -> (A -> prop A) -> prop A
lemProp1 A h a0 = h a0 a0

-- propN0 : prop N0
-- propN0 a b = efq (Id N0 a b) a

-- -- a product of propositions is a proposition

-- isPropProd : (A : U) (B : A -> U) (pB : (x : A) -> prop (B x)) -> prop (Pi A B)
-- isPropProd A B pB f0 f1 = funExt A B f0 f1 (\x -> pB x (f0 x) (f1 x))

-- propNeg : (A : U) -> prop (neg A)
-- propNeg A = isPropProd A (\_ -> N0) (\_ -> propN0)

-- lemProp2 : (A : U) -> prop A -> prop (dec A)
-- lemProp2 A pA  = split
--  inl a -> split
--    inl b -> mapOnPath A (dec A) (\x -> inl x) a b (pA a b)
--    inr nb -> efq (Id (dec A) (inl a) (inr nb)) (nb a)
--  inr na -> split
--    inl b -> efq (Id (dec A) (inr na) (inl b)) (na b)
--    inr nb -> mapOnPath (neg A) (dec A) (\x -> inr x) na nb (propNeg A na nb)

-- singl : (A : U) -> A -> U
-- singl = pathTo

-- idIsEquiv : (A : U) -> isEquiv A A (id A)
-- idIsEquiv A = (sId A, tId A)

propUnit : prop Unit
propUnit = split tt -> split tt -> refl Unit tt

propPi : (A : U) (B : A -> U) -> ((x : A) -> prop (B x)) -> prop ((x : A) -> B x)
propPi A B h f0 f1 = funExt A B f0 f1 (\x -> h x (f0 x) (f1 x))

propImply : (A B : U) -> (A -> prop B) -> prop (A -> B)
propImply A B h = propPi A (\_ -> B) h

propFam : (A : U) (B : A -> U) -> U
propFam A B = (a : A) -> prop (B a)

reflexive : (A : U) -> rel A -> U
reflexive A R = (a : A) -> R a a

symmetry : (A : U) -> rel A -> U
symmetry A R = (a b : A) -> R a b -> R b a

equivalence : (A : U) -> rel A -> U
equivalence A R = and (reflexive A R) (euclidean A R)

eqToSym : (A : U) (R : rel A) -> equivalence A R -> symmetry A R
eqToSym A R z a b = (z.2) b a b (z.1 b)

eqToInvEucl : (A : U) (R : rel A) -> equivalence A R ->
              (a b c : A) -> R c a -> R c b -> R a b
eqToInvEucl A R eq a b c p q =
  eq.2 a b c (eqToSym A R eq c a p) (eqToSym A R eq c b q)

-- -- definition by case on a decidable equality
-- -- needed for Nicolai Kraus example

-- defCase : (A X : U) -> X -> X -> dec A -> X
-- defCase A X x0 x1 = split
--   inl _ -> x0
--   inr _ -> x1

-- IdDefCasel : (A X : U) (x0 x1 : X) (p : dec A) -> A ->
--              Id X (defCase A X x0 x1 p) x0
-- IdDefCasel A X x0 x1 = split
--  inl _ -> \_ -> refl X x0
--  inr v -> \u -> efq (Id X (defCase A X x0 x1 (inr v)) x0) (v u)

-- IdDefCaser : (A X : U) (x0 x1 : X) (p : dec A) -> neg A ->
--              Id X (defCase A X x0 x1 p) x1
-- IdDefCaser A X x0 x1 = split
--  inl u -> \v -> efq (Id X (defCase A X x0 x1 (inl u)) x1) (v u)
--  inr _ -> \_ -> refl X x1