module tt where

import gradLemma

test : (A:U) -> Id (A->A) (id A) (transport A A (refl U A))
test A = refl (A->A) (id A)

transpIsEquiv : (A B:U) -> (p:Id U A B) -> isEquiv A B (transport A B p)
transpIsEquiv A = J U A (\ B p -> isEquiv A B (transport A B p)) (idIsEquiv A)

IdToEquiv : (A B:U) -> Id U A B -> Equiv A B
IdToEquiv A B p = (transport A B p, transpIsEquiv A B p)

EquivToId : (A B:U) -> Equiv A B -> Id U A B
EquivToId A B z = isEquivEq A B z.1 z.2

invIsoIdRef : (A : U) -> Id (Id U A A) (isoId A A (id A) (id A) (refl A) (refl A))  (refl U A)
invIsoIdRef A = inv (Id U A A) (refl U A) (isoId A A (id A) (id A) (refl A) (refl A)) (isoIdRef A)

secIdEquiv : (A B :U) -> (p : Id U A B) -> Id (Id U A B) (EquivToId A B (IdToEquiv A B p)) p
secIdEquiv A = J U A (\ B p ->  Id (Id U A B) (EquivToId A B (IdToEquiv A B p)) p) (invIsoIdRef A)

retIdEquiv : (A B :U) (s : Equiv A B) -> Id (Equiv A B) (IdToEquiv A B (EquivToId A B s)) s
retIdEquiv A B s = lemIdEquiv A B (IdToEquiv A B (EquivToId A B s)) s (refl (A->B) s.1)

univAx : (A B:U) -> isEquiv (Id U A B) (Equiv A B) (IdToEquiv A B)
univAx A B = 
 gradLemma (Id U A B) (Equiv A B) (IdToEquiv A B) (EquivToId A B) (retIdEquiv A B) (secIdEquiv A B)
