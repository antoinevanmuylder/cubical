module pi4s3 where

import hopf
import truncHopf
import loopTrunc

-- Letâ€™s define the twelve maps first

f0 : Z -> loopS1
f0 = loopIt

f1 : loopS1 -> (itOmega two ptS2).1
f1 = (mapOmega ptS1 (Omega ptS2) (sigma ptS1)).1

f2 : (itOmega two ptS2).1 -> (itOmega three ptS3).1
f2 = (itMapOmega two ptS2 (Omega ptS3) (sigma ptS2)).1

f3 : (itOmega three ptS3).1 -> (itOmega three (ptJoin ptS1 S1)).1
f3 = itMapOmegaRefl three ptS3 (join S1 S1) s3ToS1JoinS1

f4 : (itOmega three (ptJoin ptS1 S1)).1 -> (itOmega three ptS2).1
f4 = itMapOmegaRefl three (ptJoin ptS1 S1) S2 ptAlpha.1

f5 : (itOmega three ptS2).1 -> (itOmega three (ptJoin ptS1 S1)).1
f5 = hopfLoop

f6 : (itOmega three (ptJoin ptS1 S1)).1 -> (itOmega three ptS3).1
f6 = itMapOmegaRefl three (ptJoin ptS1 S1) S3 s3ToS1JoinS1Inv

f7 : (itOmega three ptS3).1 -> (itOmega two (ptTrunc three ptS2)).1
f7 = pi3S3

f8 : (itOmega two (ptTrunc three ptS2)).1 -> (Omega (ptTrunc two (Omega ptS2))).1
f8 = mapOmegaRefl (Omega (trS2,inc north)) (trunc two (Omega ptS2).1) (kappaTwo ptS2)

f9 : (Omega (ptTrunc two (Omega ptS2))).1 -> trunc one (itOmega two ptS2).1
f9 = kappaOne (Omega ptS2)

fA : trunc one (itOmega two ptS2).1 -> loopS1
fA = pi2S2

fB : loopS1 -> Z
fB = encode base

composition : Z -> Z
composition n = fB (fA (f9 (f8 (f7 (f6 (f5 (f4 (f3 (f2 (f1 (f0 n)))))))))))

oneZ : Z
oneZ = sucZ zeroZ

brunerie : Z
brunerie = composition oneZ


-- WORKS
test0To1 : (itOmega two ptS2).1
test0To1 = f1 (f0 oneZ)

-- WORKS
test0To2 : (itOmega three ptS3).1
test0To2 = f2 test0To1

-- WORKS
test0To3 : (itOmega three (ptJoin ptS1 S1)).1
test0To3 = f3 test0To2

-- WORKS
test0To4 : (itOmega three ptS2).1
test0To4 = f4 test0To3

-- NOT SURE (takes a long time)
test0To5 : (itOmega three (ptJoin ptS1 S1)).1
test0To5 = f5 test0To4

-- NOT SURE (takes a long time)
test0To6 : (itOmega three ptS3).1
test0To6 = f6 test0To5

-- NOT SURE (takes a long time)
test0To7 : (itOmega two (ptTrunc three ptS2)).1
test0To7 = f7 test0To6



-- WORKS
testShortcut2To9 : Z
testShortcut2To9 = fB (fA (shortcut2To9 (f1 (f0 oneZ))))
  where
    shortcut2To9 : (itOmega two ptS2).1 -> trunc one (itOmega two ptS2).1
    shortcut2To9 = inc

-- WORKS
testShortcut2To8 : Z
testShortcut2To8 = fB (fA (f9 (shortcut2To8 (f1 (f0 oneZ)))))
  where
    shortcut2To8 : (itOmega two ptS2).1 -> (Omega (ptTrunc two (Omega ptS2))).1
    shortcut2To8 = mapOmegaRefl (Omega ptS2) (trunc two (Omega ptS2).1) inc

-- WORKS (but takes a long time)
testShortcut2To7 : Z
testShortcut2To7 = fB (fA (f9 (f8 (shortcut2To7 (f1 (f0 oneZ))))))
  where
    shortcut2To7 : (itOmega two ptS2).1 -> (itOmega two (ptTrunc three ptS2)).1
    shortcut2To7 = itMapOmegaRefl two ptS2 (trunc three S2) inc

-- WORKS
testShortcut3To6 : Z
testShortcut3To6 = fB (fA (f9 (f8 (f7 (f2 (f1 (f0 oneZ)))))))


testShortcut4To5 : Z
testShortcut4To5 = fB (fA (f9 (f8 (f7 (f6 (f3 (f2 (f1 (f0 oneZ)))))))))


dummyHopf : S2 -> U
dummyHopf = hsplit (\_ -> U) with
  north -> S1
  south -> S1
  merid _ -> undefined


totalDummyHopfToJoin : (Sigma S2 dummyHopf) -> join S1 S1
totalDummyHopfToJoin xy = t xy.1 xy.2 where

  t : (x : S2) -> dummyHopf x -> join S1 S1
  t = hsplit (\x -> (dummyHopf x -> join S1 S1)) with
      north   -> inl
      south   -> inr
      merid _ -> undefined

fast : (itOmega three (Sigma S2 dummyHopf, (north, base))).1
fast = itTotalFibOmega three ptS2 dummyHopf base (test0To4, undefined)

slow : (itOmega three (ptJoin ptS1 S1)).1
slow = itMapOmegaRefl three (Sigma S2 dummyHopf, (north,base)) (join S1 S1) totalDummyHopfToJoin fast
