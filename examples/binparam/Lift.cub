module Lift where

extensionality
      : (A : forall i. U) ->
        (B : forall i. A@i -> U) ->
        (f0 : (x : A@0) -> B@0 x) ->
        (f1 : (x : A@1) -> B@1 x) ->
        (q : (x0 : A@0) (x1 : A@1) -> (x' : A ? x0 & x1) -> (<i> (B@i ([x0 & x1 , x']@i))) ? (f0 x0) & (f1 x1)) ->
        (<i> (x : A@i) -> B@i x) ? f0 & f1
extensionality A B f0 f1 q = g!
  where g : forall i. (x : A@i) -> B@i x
        g = <i> \x -> [f0 x@0 & f1 x@1, q x@0 x@1 x!]@i



substitutivity : (A : U) (P : A -> U) (x y : A) -> ((<i> A) ? x & y) -> P x -> P y
substitutivity A P x y p q =  (q ^ (<i> P w@i))@1
   where w : forall i. A
         w = [x & y , p]

-- symmetry : (x : A) (y : A) -> (<i>A) ? x & y -> (<i>A) ? y & x
-- symmetry x y q 

