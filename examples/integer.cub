module integer where

-- import gradLemma

import lemId

Z : U
data Z = zeroZ | posZ (n : N) | negZ (n : N)

sucZ : Z -> Z
sucZ = split
  zeroZ -> posZ zero
  posZ n -> posZ (suc n)
  negZ n -> auxsucZ n
   where
    auxsucZ : N -> Z
    auxsucZ = split
      zero  -> zeroZ
      suc n -> negZ n

predZ : Z -> Z
predZ = split
  zeroZ -> negZ zero
  posZ n -> auxpredZ n
   where
    auxpredZ : N -> Z
    auxpredZ = split
      zero  -> zeroZ
      suc n -> posZ n
  negZ n -> negZ (suc n)

sucpredZ : (n : Z) -> Id Z (sucZ (predZ n)) n
sucpredZ = split
  zeroZ -> refl Z zeroZ
  posZ n -> lem n
   where
    lem : (n : N) -> Id Z (sucZ (predZ (posZ n))) (posZ n)
    lem = split
      zero  -> refl Z (posZ zero)
      suc n -> refl Z (posZ (suc n))
  negZ n -> refl Z (negZ n)

predsucZ : (n : Z) -> Id Z (predZ (sucZ n)) n
predsucZ = split
  zeroZ -> refl Z zeroZ
  posZ n -> refl Z (posZ n)
  negZ n -> lem n
   where
    lem : (n : N) -> Id Z (predZ (sucZ (negZ n))) (negZ n)
    lem = split
      zero  -> refl Z (negZ zero)
      suc n -> refl Z (negZ (suc n))

sucIdZ : Id U Z Z
sucIdZ = isoId Z Z sucZ predZ sucpredZ predsucZ
