module integer where

-- import gradLemma

import lemId

Z : U
Z = or N N

zeroZ : Z
zeroZ = inr zero

sucZ : Z -> Z
sucZ = split
  inl u -> auxsucZ u
    where
    auxsucZ : N -> Z
    auxsucZ = split
      zero  -> inr zero
      suc n -> inl n
  inr v -> inr (suc v)

predZ : Z -> Z
predZ = split
  inl u -> inl (suc u)
  inr v -> auxpredZ v
    where
    auxpredZ : N -> Z
    auxpredZ = split
      zero  -> inl zero
      suc n -> inr n

sucpredZ : (x : Z) -> Id Z (sucZ (predZ x)) x
sucpredZ = split
  inl u -> refl Z (inl u)
  inr v -> lem v
   where
    lem : (u : N) -> Id Z (sucZ (predZ (inr u))) (inr u)
    lem = split
      zero  -> refl Z (inr zero)
      suc n -> refl Z (inr (suc n))

predsucZ : (x : Z) -> Id Z (predZ (sucZ x)) x
predsucZ = split
  inl u -> lem u
   where
    lem : (u : N) -> Id Z (predZ (sucZ (inl u))) (inl u)
    lem = split
      zero  -> refl Z (inl zero)
      suc n -> refl Z (inl (suc n))
  inr v -> refl Z (inr v)

sucIdZ : Id U Z Z
sucIdZ = isoId Z Z sucZ predZ sucpredZ predsucZ
