module pi1s2 where

import trunc
import truncS2
import unit

pi1S2 : U
pi1S2 = setr (Id S2 north north)

corr7312 : Id U pi1S2 (Id (grt S2) (inc north) (inc north))
corr7312 = thm7312 S2 (suc zero) north north

unitgrtS2 : Id U Unit (grt S2)
unitgrtS2 = lemUn1 (grt S2) (inc north) corr2

corrgrtS2 : Id U Unit (Id (grt S2) (inc north) (inc north))
corrgrtS2 = subst U (\X -> (x : X) -> Id U Unit (Id X x x))
                  Unit (grt S2) unitgrtS2 lemUn3 (inc north)

pi1S2Unit : Id U pi1S2 Unit
pi1S2Unit = idEuclid U pi1S2 Unit (Id (grt S2) (inc north) (inc north))
                     corr7312 corrgrtS2

triv : pi1S2
triv = inc (refl S2 north)

loop : pi1S2
loop = inc (comp S2 north south north (merid base)
                    (inv S2 north south (merid base)))

propi1S2 : prop pi1S2
propi1S2 = substInv U prop pi1S2 Unit pi1S2Unit propUnit

test : Id pi1S2 triv loop
test = propi1S2 triv loop

test1 : Id pi1S2 triv triv
test1 = propi1S2 triv triv

setrIdSusp : U -> U
setrIdSusp X = setr (Id (susp X) north north)

corrpi1S2 : prop (setr (Id (susp sone) north north))
corrpi1S2 = substInv U P sone S1 s1EqCircle propi1S2
  where P : U -> U
        P X = prop (setrIdSusp X)

triv1 : setrIdSusp sone
triv1 = inc (refl (susp sone) north)

test2 : Id (setrIdSusp sone) triv1 triv1
test2 = corrpi1S2 triv1 triv1

loop1 : setrIdSusp sone
loop1 = inc (comp (susp sone) north south north
                  (merid north)
                  (inv (susp sone) north south (merid south)))

test3 : Id (setrIdSusp sone) triv1 loop1
test3 = corrpi1S2 triv1 loop1

test4 : prop (Id (grt S2) (inc north) (inc north))
test4 = subst U prop Unit (Id (grt S2) (inc north) (inc north)) corrgrtS2 propUnit

test5 : prop pi1S2
test5 = substInv U prop pi1S2 (Id (grt S2) (inc north) (inc north)) corr7312 test2

