module paramIsoPred where

import Eq

left : (A : U) ->
       (P : (A -> U)) ->
       (<i> U ) ? A
left A P = R!
  where R : forall i. U
        R = [ A , Psi P ]

right : (A : U) ->
       (<i> U ) ? A ->
       A -> U
right A Q x = [ A , Q ] ? x

Comp1 : U
Comp1 = (A : U) ->
        (Q : (<i> U ) ? A)
        -> Eq ((<i> U ) ? A) Q (left A (right A Q))

comp1 : (A : U) ->
        (Q : (<i> U ) ? A)
        -> Eq ((<i> U ) ? A) Q (left A (right A Q))
comp1 A Q Pred proof = proof

comp2 : (A : U) ->
       (P : (A -> U)) ->
       Eq (A -> U) P (right A (left A P))
comp2 A Q Pred proof = proof


-- [ A , Psi (\x -> [ A , Q ] ? x) ]!
