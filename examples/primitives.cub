module primitives where

primitive Id : (A : U) (a b : A) -> U

primitive refl : (A : U) (a : A) -> Id A a a

prop : U -> U
prop A = (a b : A) -> Id A a b

id : (A : U) -> A -> A
id A a = a

primitive transport : (A B : U) -> Id U A B -> A -> B

primitive transpInv : (A B : U) -> Id U A B -> B -> A

transportRef : (A : U) (a : A) -> Id A a (transport A A (refl U A) a)
transportRef = refl


-- primitive mapOnPath : (A B : U) (f : A -> B) (a b : A)
--                       (p : Id A a b) -> Id B (f a) (f b)

-- primitive appOnPath : (A B : U) (f g : A -> B) (a b : A)
--                       (q : Id (A -> B) f g) (p : Id A a b) -> Id B (f a) (g b)

primitive IdP : (A B : U) -> Id U A B -> A -> B -> U


-- IdS : (A : U) (F : A -> U) (a0 a1 : A) (p : Id A a0 a1) -> F a0 -> F a1 -> U
-- IdS A F a0 a1 p = IdP (F a0) (F a1) (mapOnPath A U F a0 a1 p)

