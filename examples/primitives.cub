module primitives where

primitive Id : (A : U) (a b : A) -> U

primitive refl : (A : U) (a : A) -> Id A a a

primitive inv : (A : U) (a b : A) -> Id A a b -> Id A b a

singl : (A : U) -> A -> U
singl A a = (x: A) * (Id A a x)

primitive contrSingl : (A : U) (a b : A) (p : Id A a b) ->
                       Id (singl A a) (a, refl A a) (b, p)

primitive transport : (A B : U) -> Id U A B -> A -> B

primitive transpInv : (A B : U) -> Id U A B -> B -> A

primitive mapOnPath : (A B : U) (f : A -> B) (a b : A)
                      (p : Id A a b) -> Id B (f a) (f b)

primitive appOnPath : (A B : U) (f g : A -> B) (a b : A)
                      (q : Id (A -> B) f g) (p : Id A a b) -> Id B (f a) (g b)

primitive IdP : (A B : U) -> Id U A B -> A -> B -> U

IdS : (A : U) (F : A -> U) (a0 a1 : A) (p : Id A a0 a1) -> F a0 -> F a1 -> U
IdS A F a0 a1 p = IdP (F a0) (F a1) (mapOnPath A U F a0 a1 p)

primitive mapOnPathD : (A : U) (F : A -> U) (f : (x : A) -> F x) (a0 a1 : A)
                       (p : Id A a0 a1) -> IdS A F a0 a1 p  (f a0) (f a1)

primitive mapOnPathS : (A : U) (F : A -> U) (C : U) (f : (x : A) -> F x -> C)
                       (a0 a1 : A) (p : Id A a0 a1) (b0 : F a0) (b1 : F a1)
                       (q : IdS A F a0 a1 p b0 b1) -> Id C (f a0 b0) (f a1 b1)

primitive funExt : (A : U) (B : A -> U) (f g : (x : A) -> B x) ->
                   ((x : A) -> Id (B x) (f x) (g x)) ->
                   Id ((y : A) -> B y) f g

primitive isoId : (A B : U) (f : A -> B) (g : B -> A)
	           (s : (y:B) -> Id B (f (g y)) y)
                   (t : (x:A) -> Id A (g (f x)) x) ->
                   Id U A B

id : (A : U) -> A -> A
id A a = a

primitive isoIdRef : (A : U) ->
                   Id (Id U A A) (refl U A) (isoId A A (id A) (id A) (refl A) (refl A))
