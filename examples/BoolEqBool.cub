module BoolEqBool where

import equivSet
import hedberg

notInj : (x y : Bool) -> Id Bool (not x) (not y) -> Id Bool x y
notInj x y p = compUp Bool (not (not x)) x (not (not y)) y (notK x) (notK y) rem
  where
  rem : Id Bool (not (not x)) (not (not y))
  rem = mapOnPath Bool Bool not (not x) (not y) p

notFiber : Bool -> U
notFiber b = fiber Bool Bool not b

eqNotFiber : (b : Bool) -> (v v' : notFiber b) ->
             Id Bool v.1 v'.1 -> Id (notFiber b) v v'
eqNotFiber b =
  eqPropFam Bool (\x -> Id Bool (not x) b) (\x -> boolIsSet (not x) b)

sNot : (b : Bool) -> notFiber b
sNot b = (not b, notK b)

tNot : (b : Bool) (v : notFiber b) -> Id (notFiber b) (sNot b) v
tNot b v = eqNotFiber b (sNot b) v rem
  where
  rem1 : Id Bool (not (not b)) (not v.1)
  rem1 = comp Bool (not (not b)) b (not v.1) (notK b)
         (inv Bool (not v.1) b v.2)

  rem : Id Bool (not b) v.1
  rem = notInj (not b) v.1 rem1

-- Directly use equivEq
eqBoolBool1 : Id U Bool Bool
eqBoolBool1 = equivEq Bool Bool not sNot tNot

monoidAndBool : Monoid Bool
monoidAndBool = monoid true andBool andBoolA andBoolTrue andTrueBool

monoidOrBool1 : Monoid Bool
monoidOrBool1 = transMonoid Bool Bool eqBoolBool1 monoidAndBool

zBool1 : Bool
zBool1 = zm Bool monoidOrBool1

orBool1 : Bool -> Bool -> Bool
orBool1 = opm Bool monoidOrBool1

-- It works to transfer proofs as well
orBool1A :
  (a b c : Bool) -> Id Bool (orBool1 a (orBool1 b c)) (orBool1 (orBool1 a b) c)
orBool1A = opmA Bool monoidOrBool1

-- Check that we really get or
testFF1 : Bool
testFF1 = orBool1 false false

testFT1: Bool
testFT1 = orBool1 false true

testTF1 : Bool
testTF1 = orBool1 true false

testTT1 : Bool
testTT1 = orBool1 true true

-- Use the necessary condition for sets instead
eqBoolBool2 : Id U Bool Bool
eqBoolBool2 = equivSet Bool Bool not not notK notInj boolIsSet

monoidOrBool2 : Monoid Bool
monoidOrBool2 = transMonoid Bool Bool eqBoolBool2 monoidAndBool

orBool2 : Bool -> Bool -> Bool
orBool2 = opm Bool monoidOrBool2

-- Check that we get or again
testFF2 : Bool
testFF2 = orBool2 false false

testFT2 : Bool
testFT2 = orBool2 false true

testTF2 : Bool
testTF2 = orBool2 true false

testTT2 : Bool
testTT2 = orBool2 true true

testTT2' : Id Bool (orBool false true) (orBool2 false true)
testTT2' = refl Bool true

-----------
transun : (A B : U) -> Id U A B -> (A -> A) -> (B -> B)
transun = subst U (\X -> (X -> X))

transid : Bool -> Bool
transid = transun Bool Bool eqBoolBool1 (\x -> x)

testT : Bool
testT = transid true

testT' : Bool
testT' = transun Bool Bool (refl U Bool) (\x -> x) true

testF : Bool
testF = transid false

notEqBool : Bool -> Bool
notEqBool = transport Bool Bool eqBoolBool1

testBool : Bool
testBool = notEqBool true

compEqBool : Id U Bool Bool
compEqBool = comp U Bool Bool Bool eqBoolBool1 eqBoolBool1

transport' : (A B : U) -> Id U A B -> A -> B
transport' = subst U (\x -> x)

funCompEqBool : Bool -> Bool
funCompEqBool = transport' Bool Bool compEqBool

newTestBool : Bool
newTestBool = funCompEqBool true

newCompEqBool : Id U Bool Bool
newCompEqBool = comp U Bool Bool Bool eqBoolBool1 (refl U Bool)

test2Bool : Bool
test2Bool = transport' Bool Bool newCompEqBool true